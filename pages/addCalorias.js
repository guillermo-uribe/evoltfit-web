import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect, useCallback, Fragment } from "react";
import Navbar from "/components/Navbar";
import Footer from "/components/Footer";
import CardProducto from "/components/CardProducto";
import SeleccionarProducto from "/components/SeleccionarProducto";
import supabase from "../config/supabaseClient";

export default function Home() {
  const router = useRouter();
  let registroIndex = router.query.registro;

  const currentDate = new Date();
  const fecha_act =
    currentDate.getFullYear() +
    "-" +
    currentDate.getMonth() +
    1 +
    "-" +
    currentDate.getDate();

  const [sesion, setSesion] = useState(null);
  const [registro, setRegistro] = useState(null);
  const [formInput, setFormInput] = useState();
  const [productosRegistro, setProductosRegistro] = useState([])
  const [toggleSeleccionar, setToggleSeleccionar] = useState(false);

  useEffect(() => {
    localStorage.removeItem("NombrePaquete");
    localStorage.removeItem("Meses");
    handleSesion()
  }, [])

  const handleSesion = async () => {

    if (!registroIndex) {
      router.push('/visualizadorCalorias')
    }

    const { data, error } = await supabase.auth.getSession()

    if(data.session){
      setSesion(data.session);
      getRegistro();
    } 
    else {
      setSesion(null);
      router.push('/login')
    }
  }

  async function getRegistro() {
    
    const { data, error } = await supabase
    .from('calorias_registro')
    .select('*')
    .eq('id', registroIndex)

    if (error) {
      console.log('ERROR: No se encontr贸 el registro de calorias.')
      console.log(error)
    }
    else{
      setRegistro(data[0]);
      setFormInput({
        nombre: data[0].nombre
      })
      
      getProductosRegistro();
    }
  }

  async function updateRegistro(nombre) {
    //console.log(rutinaIndex)
    let temp;

    if (nombre == ''){
      temp = 'Registro calorico sin nombre'
    }
    else{
      temp = nombre
    }

    const { error } = await supabase
    .from('calorias_registro')
    .update({ nombre: temp})
    .eq('id', registroIndex)

    if (error) {
      console.log('ERROR: No se pudo actualizar el registro.')
      console.log(error)
    }
    else{
      console.log('Registro actualizado')
      //console.log(data[0])
    }
  }

  async function eliminarRegistro() {
    const { error } = await supabase
    .from('calorias_registro')
    .delete()
    .match({id: registro.id, usuario: sesion.user.id})

    if (error) {
      console.log('ERROR: Error al eliminar el registro calorico.')
      console.log(error)
    }
    else{
      console.log('Se elimin贸 ' + registro.nombre)
      router.push('/visualizadorCalorias')
    }
  }

  async function getProductosRegistro() {
    const { data, error } = await supabase
    .from('calorias_registro_productos')
    .select(`
      id,
      producto_id (
        id,
        nombre,
        calorias,
        proteinas,
        grasas,
        tipo
      )
    `)
    .eq('registro', registroIndex)

    if (error) {
      console.log('ERROR: Hubo un error al recuperar los productos.')
      console.log(error)
    }
    else{
      //console.log(data);
      setProductosRegistro(data);
    }
  }

  async function agregarProducto(idProducto) {
    const { data, error } = await supabase
      .from('calorias_registro_productos')
      .insert({
        registro: registroIndex, 
        producto_id: idProducto
        })
      .select(`
        id,
        producto_id (
          id,
          nombre,
          calorias,
          proteinas,
          grasas,
          tipo
        )
      `)

      if(error) {
        console.log(error)
        console.log("ERROR: Hubo un error al agregar un nuevo producto.")
      }
      else{
        console.log("Se agreg贸 un nuevo producto.")
        console.log(data[0])
        setProductosRegistro(current => [...current, data[0]]);
      }

    const { data2, error2 } = await supabase
    .from('calorias_productos_totales')
    .insert({
      producto_id: idProducto,
      usuario: sesion.user.id,
      fecha_agregado: fecha_act,
      registro: registroIndex
    })

    if(error2) {
      console.log(error2)
      console.log("ERROR: Hubo un error al agregar un nuevo producto a la tabla total.")
    }
    else{
      console.log("Se elimin贸 el producto a la tabla de productos totales.")
    }

    setToggleSeleccionar(false);
  }

  const handleOnInputChange = useCallback(
    (event) => {
      const { value, name, id, checked} = event.target;

      setFormInput({
        ...formInput,
        [name]: value,
      });

      updateRegistro(value)

    },
    [formInput, setFormInput]
  );

  return (
    <div className="bg-stone-100 w-full z-0" data-theme="emerald">
      <Head>
        <title>EvoltFit</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      <main>
        <br />
        <br />
        <br />
        <br />
        <br />
        <div>          
          {
            registro ? 
            <Fragment>
              <div className={"mx-auto mt-2 " + (toggleSeleccionar ? 'blur-sm' : '')}>
                <div className="flex flex-col w-7/12 mx-auto">
                  <div>
                    <button className="btn btn-ghost m-0 px-2 text-lg" onClick={() => {router.push('/visualizadorCalorias')}}>
                      <div className='text-3xl mt-auto'>
                        <ion-icon name="arrow-back-outline"></ion-icon>
                      </div>
                      <span className="ml-2">{"Volver a registros"}</span>
                    </button>
                    <br/>
                    <input name="nombre" id="nombre" type="text" className="px-5 py-3 mt-2 text-gray-700 bg-white border border-gray-200 rounded-md  focus:border-blue-400 focus:ring-blue-300 focus:ring-opacity-40 dark:focus:border-blue-300 focus:outline-none focus:ring my-2 mr-52" value={formInput.nombre || ""} onChange={handleOnInputChange}/>
                    <button onClick={() => setToggleSeleccionar(!toggleSeleccionar)} className="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-base px-5 py-2.5 text-center mr-2 mb-2 ">Agregar producto</button>
                    <button onClick={eliminarRegistro} className="text-white bg-red-700 hover:bg-red-800 focus:outline-none focus:ring-4 focus:ring-red-300 font-medium rounded-full text-base px-5 py-2.5 text-center mr-2 mb-2 ">Eliminar registro</button>
                    <br/>
                    <div className = "grid place-items-center">
                    { productosRegistro.length === 0 ?
                        <h2><br/>No hay productos en el registro</h2>
                      :
                        (productosRegistro.map((registro) => (
                            <CardProducto
                            key={registro.id}
                            registroProducto={registro} 
                            sesion = {sesion.user.id}
                            getProductosRegistro={getProductosRegistro}
                            />
                          ))
                        )
                    }
                    </div>
                  </div>
                </div>
                
              </div> 
              { 
                toggleSeleccionar ? 
                <SeleccionarProducto
                agregarProducto={agregarProducto}
                setToggleSeleccionar={setToggleSeleccionar}
                /> 
                : '' }
            </Fragment>
            : 
            <div className="mt-12">
              <div className="loader mt-6"></div>
            </div>
          }
        </div>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
      </main>

     

      <Footer></Footer>
    </div>
  );
}
