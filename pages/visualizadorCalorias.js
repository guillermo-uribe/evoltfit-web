import { useState, useEffect } from "react";
import { useRouter } from 'next/router';
import Head from "next/head";
import Navbar from "/components/Navbar";
import Footer from "/components/Footer";
import supabase from "/config/supabaseClient";
import CardCalorias from "../components/CardCalorias";

export default function VisualizadorCalorias() {

  const router = useRouter();

  const [sesion, setSesion] = useState(null);
  // const [paginacion, setPaginacion] = useState(1);
  const [registros, setRegistros] = useState(null);
  const [cantidad, setCantidad] = useState(null);

  useEffect(() => {
    handleSesion()
    localStorage.removeItem("NombrePaquete");
    localStorage.removeItem("Meses");
  }, [])

  const nuevoRegistro = async () => {
    let query = supabase
    .from('calorias_registro')
    .select('nombre', { count: 'exact', head: true })
    .eq('usuario', sesion.user.id)

    const count = await query

    const { data, error } = await supabase
      .from('calorias_registro')
      .insert({
        usuario: sesion.user.id, 
        nombre: "Registro caloríco " + (count.count + 1)
        })
      .select()

    if (error) {
      console.log(error)
      console.log("ERROR: Hubo un error al crear un nuevo registro.")
    }
    else{
      //console.log(data);
      //console.log("Se creó una nueva rutina.")
      router.push({
        pathname: '/addCalorias',
        query: { rutina: data[0].id }
      })
    }
  }

  async function obtenerRegistros(session) {
    const { data, error } = await supabase
    .from('calorias_registro')
    .select('*')
    .eq('usuario', session.user.id)

    if (error) {
      console.log('ERROR: Hubo un error al recuperar la rutina.')
      console.log(error)
    }
    else{
      console.log(data);
      setRegistros(data);
    }
  }

  const handleSesion = async () => {

    const { data, error } = await supabase.auth.getSession()

    if(data.session){
      setSesion(data.session);
      obtenerRegistros(data.session);
      //console.log(data);
    } 
    else {
      setSesion(null);
      router.push('/login')
    }
  }



  return (
    <div className="bg-blue-50 w-full">
      <Head>
        <title>EvoltFit - Registro de Calorías</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <div className="flex flex-col items-center">
          <button className="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" onClick={() => {router.push("/agregarProducto")}}>Agregar producto</button>
        </div>
        <br />
    
        {
            registros ? 
            <div className="mx-auto mt-6">
              <div className="flex flex-col w-9/12 mx-auto">
                <h2 className="text-2xl ">{"Registros calorícos de " + sesion.user.user_metadata.nombre}</h2>
                <br/>
                { registros.length === 0 ? 
                    <h2 className = "text-center">No hay registros que mostrar</h2>
                  :
                    (registros.map((registro) => (
                        <CardCalorias key={registro.id} registro={registro}/>
                      ))
                    )
                }
              </div>
              <br/>
              <div className = "flex justify-center">
              <button type="submit" onClick={nuevoRegistro} className=" text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Nuevo registro</button>
              </div>
              {/* PAGINACIÓN */}
              {/* <div className="flex flex-col items-center mb-2 mt-4">
                <div className="btn-group">
                  {(paginacion == 1) ? "" : <button className="bg-blue-600 text-xl lg:btn-lg" onClick={() => {setPaginacion(paginacion - 1)}}>«</button>}
                  {((paginacion - 2) <= 0) ? "" : <button className="" onClick={() => {setPaginacion(paginacion - 2)}}>{paginacion - 2}</button>}
                  {((paginacion - 1) <= 0) ? "" : <button className="" onClick={() => {setPaginacion(paginacion - 1)}}>{paginacion - 1}</button>}
                  <button className="btn lg:btn-lg btn-secondary">{paginacion}</button>
                  {(cantidad > (paginacion * 10))? <button className="" onClick={() => {setPaginacion(paginacion + 1)}}>{paginacion + 1}</button> : ""}
                  {(cantidad > ((paginacion+1) * 10))? <button className="" onClick={() => {setPaginacion(paginacion + 2)}}>{paginacion + 2}</button> : ""}
                  {(paginacion >= (cantidad/10))? "" : <button className="" onClick={() => {setPaginacion(paginacion + 1)}}>»</button>}
                </div>
              </div> */}
            </div> 
            : 
            <div className="mt-12">
              <div className="loader mt-6"></div>
            </div>
          }
        <br />
        <br />
        <br />
        <br />
        <br />
        
        <Footer></Footer>
      </main>
    </div>
  );
}
